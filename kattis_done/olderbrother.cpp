/** 
...people live their lives bound by what they accept as correct and true... that is how they define reality. But what does it mean to be correct or true? Merely vague concepts... their reality may all be an illusion        
*/
#include <bits/stdc++.h>
#define forn(i, l, r) for(int i=l;i<=r;i++)
#define all(v) v.begin(),v.end()
#define pb push_back
#define nd second
#define st first
#define debug(x) cout<<#x<<" -> "<<x<< endl
#define rsa(x, y) memset(x, y, sizeof x);

using namespace std;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<string> vs;
typedef vector<double> vd;
typedef vector<long long> vll;
typedef vector<vector<int> > vvi;
typedef vector<vll> vvll;
typedef vector<pair<int, int> > vpi;
typedef vector<vpi> vvpi;
typedef pair<int, int> pi;
typedef pair<ll, ll> pll;
typedef vector<pll> vpll;
typedef unordered_map<int, int> um;
const int INF = 1 << 30;
/**
Start coding from here
*/


ll _sieve_size;
bitset<10000010> bs;                     // 10^7 should be enough for most cases
vi primes;               // compact list of primes in form of vector<long long>


// first part

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
  _sieve_size = upperbound+1;                     // add 1 to include upperbound
  bs.set();                                                 // set all bits to 1
  bs[0] = bs[1] = 0;                                     // except index 0 and 1
  for (ll i = 2; i < _sieve_size; i++) if (bs[i]) {
    // cross out multiples of i <= _sieve_size starting from i*i
    for (ll j = i*i; j < _sieve_size; j += i) bs[j] = 0;
    primes.push_back(i);       // also add this vector containing list of primes
} }                                           // call this method in main method

bool isPrime(ll N) {                 // a good enough deterministic prime tester
  if (N < _sieve_size) return bs[N];                // now O(1) for small primes
  for (int i = 0; (i < primes.size()) && (primes[i]*primes[i] <= N); i++)
    if (N%primes[i] == 0) return false;
  return true;                    // it takes longer time if N is a large prime!
}                      // note: only work for N <= (last prime in vi "primes")^2

um primeFactors(ll N) {   // remember: vi is vector of integers, ll is long long
	um factors;                    // vi `primes' (generated by sieve) is optional
	ll PF_idx = 0, PF = primes[PF_idx];     // using PF = 2, 3, 4, ..., is also ok
	while ((N != 1) && (PF*PF <= N)) {   // stop at sqrt(N), but N can get smaller
		while (N%PF == 0) { N /= PF; factors[PF]++; }      // remove this PF
		PF = primes[++PF_idx];                              // only consider primes!
	}
	if (N != 1) factors[N]++;     // special case if N is actually a prime
	return factors;         // if pf exceeds 32-bit integer, you have to change vi
}
int m, n;


int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int n;
	sieve(100000);
	cin >> n;
	um ans = primeFactors(n);
	if (ans.size() == 1) cout << "yes\n";
	else cout << "no\n";
	return 0;
}
